procedure main() {
  read alphabet
  read max_lenght

  zip_files_array // dinamic array that contains all the path 

  // for every zip_file_path given by the user, add zip_file_path to the zip_files_array
  while (read zip_file_path) {
    zip_files_array += zip_file_path        
  }

  quantity_zip_files = zip_files_array.lenght()

  // find the password of each zip file
  for(i = 0; i < quantity_zip_files; ++i) {
    print( zip_files_array[i] + find_password(zip_files_array[i], alphabet, max_lenght) )
  }
}

// find_password is inspired by the lexicographic order algorithm for combinations
procedure find_password(zip_files_array[i], alphabet, max_lenght) {
  bool password_found = false
  string word // empty string
  n = alphabet.size()

  for i = 1; i <= max_lenght; ++i {
    word = ""  // empty the word string
    // first, we fill the i first characters of the words with the first character of the alphabet
    for j =0; j < i; ++j {
      word[j] = alphabet[0]
    }

    // then we create every single combination posible for a word of i characters
    while word != "" {
      if zip.try_password(word) == success {
        return word
      }
      k = i - 1
      while (k>=0 word[k] == alphabet[n-1]) {
        k--
      }

      if k < 0 {
        break
      }

      for j = 0; j<nl ++j {
        if alphabet[j] > word[k] {
          word[k] = alphabet[j]
          break
        }
      }

      for j = k + 1; j < i; ++j {
        word[j] = alphabet[0]
      }
    }
  }
  return "" // in this case, every single combination were tried, and none worked, therefore we return an empty array
}
